---
title: "Client Report - BYU-Idaho Players and Comparing Teams"
subtitle: "Unit 2 Task 2"
author: "Zach McLaughlin"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

Here you can see that all of these players have a perfect batting average which is likely due to a low number of at bats which we cannot see from this query.

```{python}
q = '''
      SELECT playerID,
             yearID,
             round(H*1.0 / AB, 3) as `Batting Average`
      FROM batting
      WHERE AB > 0
      ORDER BY `Batting Average` DESC, playerID
      LIMIT 5
    '''
results = pd.read_sql_query(q, con)
results
```


## QUESTION 2

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__  

Here since we raised the min at bats to 10, we can see a more realistic batting average with the best being 64%

```{python}
q = '''
      SELECT playerID,
             yearID,
             round(H*1.0 / AB, 3) as `Batting Average`
      FROM batting
      WHERE AB > 10
      ORDER BY `Batting Average` DESC, playerID
      LIMIT 5
    '''
results = pd.read_sql_query(q, con)
results
```


## QUESTION 3

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats over their entire career, and print the top 5 results.__

Here we see a lifetime batting average for players with a minimum of 100 at bats in their career. This is the most accurate out of the three because the more data you have the more accurate it will get meaning gouping by year and setting a minimum of 100 at bats gives us a much more realistic batting average of 36%

```{python}
q = '''
    SELECT 
        playerID,
        ROUND(SUM(H) * 1.0 / SUM(AB), 3) AS batting_average
    FROM Batting
    GROUP BY playerID
    HAVING SUM(AB) >= 100
    ORDER BY batting_average DESC, playerID ASC
    LIMIT 5
'''
results = pd.read_sql_query(q, con)
results
```